// graphX-06.scala// "Basics are Discussed And A Graph Is Built"// use in spark-shell// graphX-01.scala - Create the vertext and edge lists// graphX-02.scala - Turn the lists into RDDs and then create a graph// graphX-03.scala - Structural APIs on the newly created graph// graphX-04.scala - indegrees,subgraph// graphX-05.scala - What's wrong - Solution// graphX-06.scala - Community-Affiliation-Strengths// graphX-07.scala - Algorithms & functions to create algorithms//           - A Versatile Function - aggregateMessages()//val cc = graph.connectedComponents() // returns another graph; costly operationcc.triplets.collectgraph.connectedComponents.vertices.map(_.swap).groupByKey.map(_._2).collectcc.vertices.map(_._2).collect.distinct.size // No. of connected components//// list the components and its number of nodes in the descending ordercc.vertices.groupBy(_._2).map(p=>(p._1,p._2.size)).    sortBy(x=>x._2,false). // sortBy(keyFunc,ascending)    collect()//// stronglyConnectedComponents//     Compute the strongly connected component (SCC) of each vertex and //     return a graph with the vertex value containing the lowest vertex id //     in the SCC containing that vertex.//val ccS = graph.stronglyConnectedComponents(10)ccS.triplets.collectccS.vertices.map(_.swap).groupByKey.map(_._2).collectccS.vertices.map(_._2).collect.distinct.size // No. of connected components//val triCounts = graph.triangleCount()val triangleCounts = triCounts.vertices.collect//