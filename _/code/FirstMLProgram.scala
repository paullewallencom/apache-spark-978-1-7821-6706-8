import breeze.linalg.{Vector, DenseVector}case class DataPoint(x: Vector[Double], y: Double)def parsePoint(x: Array[Double]): DataPoint = {	DataPoint(new DenseVector(x.slice(0,x.size-2)) , x(x.size-1))}val points = nums.map(parsePoint(_))import java.util.Randomval rand = new Random(42)points.first()var w = DenseVector.fill(nums.first.size-2){rand.nextDouble}val iterations = 100import scala.math._for (i <- 1 to iterations) {	val gradient = points.map(p => p.x * (1 / (1 + exp(-p.y*(w dot p.x))) - 1) * p.y).reduce(_ + _)    w -= gradient}